// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  creation: (where?: CreationWhereInput) => Promise<boolean>;
  ingredient: (where?: IngredientWhereInput) => Promise<boolean>;
  ingredient_Type: (where?: Ingredient_TypeWhereInput) => Promise<boolean>;
  saved_Recipe: (where?: Saved_RecipeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  creation: (where: CreationWhereUniqueInput) => CreationPromise;
  creations: (
    args?: {
      where?: CreationWhereInput;
      orderBy?: CreationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Creation>;
  creationsConnection: (
    args?: {
      where?: CreationWhereInput;
      orderBy?: CreationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CreationConnectionPromise;
  ingredient: (where: IngredientWhereUniqueInput) => IngredientPromise;
  ingredients: (
    args?: {
      where?: IngredientWhereInput;
      orderBy?: IngredientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Ingredient>;
  ingredientsConnection: (
    args?: {
      where?: IngredientWhereInput;
      orderBy?: IngredientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IngredientConnectionPromise;
  ingredient_Type: (
    where: Ingredient_TypeWhereUniqueInput
  ) => Ingredient_TypePromise;
  ingredient_Types: (
    args?: {
      where?: Ingredient_TypeWhereInput;
      orderBy?: Ingredient_TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Ingredient_Type>;
  ingredient_TypesConnection: (
    args?: {
      where?: Ingredient_TypeWhereInput;
      orderBy?: Ingredient_TypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Ingredient_TypeConnectionPromise;
  saved_Recipe: (where: Saved_RecipeWhereUniqueInput) => Saved_RecipePromise;
  saved_Recipes: (
    args?: {
      where?: Saved_RecipeWhereInput;
      orderBy?: Saved_RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Saved_Recipe>;
  saved_RecipesConnection: (
    args?: {
      where?: Saved_RecipeWhereInput;
      orderBy?: Saved_RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Saved_RecipeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createCreation: (data: CreationCreateInput) => CreationPromise;
  updateCreation: (
    args: { data: CreationUpdateInput; where: CreationWhereUniqueInput }
  ) => CreationPromise;
  updateManyCreations: (
    args: { data: CreationUpdateManyMutationInput; where?: CreationWhereInput }
  ) => BatchPayloadPromise;
  upsertCreation: (
    args: {
      where: CreationWhereUniqueInput;
      create: CreationCreateInput;
      update: CreationUpdateInput;
    }
  ) => CreationPromise;
  deleteCreation: (where: CreationWhereUniqueInput) => CreationPromise;
  deleteManyCreations: (where?: CreationWhereInput) => BatchPayloadPromise;
  createIngredient: (data: IngredientCreateInput) => IngredientPromise;
  updateIngredient: (
    args: { data: IngredientUpdateInput; where: IngredientWhereUniqueInput }
  ) => IngredientPromise;
  updateManyIngredients: (
    args: {
      data: IngredientUpdateManyMutationInput;
      where?: IngredientWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertIngredient: (
    args: {
      where: IngredientWhereUniqueInput;
      create: IngredientCreateInput;
      update: IngredientUpdateInput;
    }
  ) => IngredientPromise;
  deleteIngredient: (where: IngredientWhereUniqueInput) => IngredientPromise;
  deleteManyIngredients: (where?: IngredientWhereInput) => BatchPayloadPromise;
  createIngredient_Type: (
    data: Ingredient_TypeCreateInput
  ) => Ingredient_TypePromise;
  updateIngredient_Type: (
    args: {
      data: Ingredient_TypeUpdateInput;
      where: Ingredient_TypeWhereUniqueInput;
    }
  ) => Ingredient_TypePromise;
  updateManyIngredient_Types: (
    args: {
      data: Ingredient_TypeUpdateManyMutationInput;
      where?: Ingredient_TypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertIngredient_Type: (
    args: {
      where: Ingredient_TypeWhereUniqueInput;
      create: Ingredient_TypeCreateInput;
      update: Ingredient_TypeUpdateInput;
    }
  ) => Ingredient_TypePromise;
  deleteIngredient_Type: (
    where: Ingredient_TypeWhereUniqueInput
  ) => Ingredient_TypePromise;
  deleteManyIngredient_Types: (
    where?: Ingredient_TypeWhereInput
  ) => BatchPayloadPromise;
  createSaved_Recipe: (data: Saved_RecipeCreateInput) => Saved_RecipePromise;
  updateSaved_Recipe: (
    args: { data: Saved_RecipeUpdateInput; where: Saved_RecipeWhereUniqueInput }
  ) => Saved_RecipePromise;
  updateManySaved_Recipes: (
    args: {
      data: Saved_RecipeUpdateManyMutationInput;
      where?: Saved_RecipeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSaved_Recipe: (
    args: {
      where: Saved_RecipeWhereUniqueInput;
      create: Saved_RecipeCreateInput;
      update: Saved_RecipeUpdateInput;
    }
  ) => Saved_RecipePromise;
  deleteSaved_Recipe: (
    where: Saved_RecipeWhereUniqueInput
  ) => Saved_RecipePromise;
  deleteManySaved_Recipes: (
    where?: Saved_RecipeWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  creation: (
    where?: CreationSubscriptionWhereInput
  ) => CreationSubscriptionPayloadSubscription;
  ingredient: (
    where?: IngredientSubscriptionWhereInput
  ) => IngredientSubscriptionPayloadSubscription;
  ingredient_Type: (
    where?: Ingredient_TypeSubscriptionWhereInput
  ) => Ingredient_TypeSubscriptionPayloadSubscription;
  saved_Recipe: (
    where?: Saved_RecipeSubscriptionWhereInput
  ) => Saved_RecipeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CreationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IngredientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Ingredient_TypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Saved_RecipeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "recipeLink_ASC"
  | "recipeLink_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CommentCreateInput {
  userId: UserCreateOneInput;
  text: String;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface IngredientUpdateManyMutationInput {
  name?: String;
}

export interface UserUpdateDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
}

export interface Ingredient_TypeUpsertNestedInput {
  update: Ingredient_TypeUpdateDataInput;
  create: Ingredient_TypeCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface Ingredient_TypeUpdateDataInput {
  description?: String;
}

export interface Saved_RecipeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Saved_RecipeWhereInput;
  AND?:
    | Saved_RecipeSubscriptionWhereInput[]
    | Saved_RecipeSubscriptionWhereInput;
  OR?:
    | Saved_RecipeSubscriptionWhereInput[]
    | Saved_RecipeSubscriptionWhereInput;
  NOT?:
    | Saved_RecipeSubscriptionWhereInput[]
    | Saved_RecipeSubscriptionWhereInput;
}

export type Saved_RecipeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type CreationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Ingredient_TypeUpdateOneInput {
  create?: Ingredient_TypeCreateInput;
  update?: Ingredient_TypeUpdateDataInput;
  upsert?: Ingredient_TypeUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Ingredient_TypeWhereUniqueInput;
}

export interface CreationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userId?: UserWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  photo?: String;
  photo_not?: String;
  photo_in?: String[] | String;
  photo_not_in?: String[] | String;
  photo_lt?: String;
  photo_lte?: String;
  photo_gt?: String;
  photo_gte?: String;
  photo_contains?: String;
  photo_not_contains?: String;
  photo_starts_with?: String;
  photo_not_starts_with?: String;
  photo_ends_with?: String;
  photo_not_ends_with?: String;
  AND?: CreationWhereInput[] | CreationWhereInput;
  OR?: CreationWhereInput[] | CreationWhereInput;
  NOT?: CreationWhereInput[] | CreationWhereInput;
}

export interface Saved_RecipeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userId?: UserWhereInput;
  recipeLink?: String;
  recipeLink_not?: String;
  recipeLink_in?: String[] | String;
  recipeLink_not_in?: String[] | String;
  recipeLink_lt?: String;
  recipeLink_lte?: String;
  recipeLink_gt?: String;
  recipeLink_gte?: String;
  recipeLink_contains?: String;
  recipeLink_not_contains?: String;
  recipeLink_starts_with?: String;
  recipeLink_not_starts_with?: String;
  recipeLink_ends_with?: String;
  recipeLink_not_ends_with?: String;
  AND?: Saved_RecipeWhereInput[] | Saved_RecipeWhereInput;
  OR?: Saved_RecipeWhereInput[] | Saved_RecipeWhereInput;
  NOT?: Saved_RecipeWhereInput[] | Saved_RecipeWhereInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface IngredientUpdateInput {
  ingredientTypeCode?: Ingredient_TypeUpdateOneInput;
  name?: String;
}

export interface UserUpdateInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
}

export interface Ingredient_TypeCreateInput {
  description: String;
}

export interface Saved_RecipeUpdateManyMutationInput {
  recipeLink?: String;
}

export interface Ingredient_TypeCreateOneInput {
  create?: Ingredient_TypeCreateInput;
  connect?: Ingredient_TypeWhereUniqueInput;
}

export interface IngredientWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  ingredientTypeCode?: Ingredient_TypeWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: IngredientWhereInput[] | IngredientWhereInput;
  OR?: IngredientWhereInput[] | IngredientWhereInput;
  NOT?: IngredientWhereInput[] | IngredientWhereInput;
}

export interface IngredientCreateInput {
  ingredientTypeCode?: Ingredient_TypeCreateOneInput;
  name: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface Ingredient_TypeUpdateManyMutationInput {
  description?: String;
}

export interface CreationUpdateManyMutationInput {
  name?: String;
  description?: String;
  photo?: String;
}

export type Ingredient_TypeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  description?: String;
}>;

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CreationUpdateInput {
  userId?: UserUpdateOneInput;
  name?: String;
  description?: String;
  photo?: String;
}

export interface IngredientSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IngredientWhereInput;
  AND?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
  OR?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
  NOT?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
}

export interface CreationCreateInput {
  userId?: UserCreateOneInput;
  name: String;
  description: String;
  photo: String;
}

export interface UserUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
}

export interface Saved_RecipeUpdateInput {
  userId?: UserUpdateOneInput;
  recipeLink?: String;
}

export interface Saved_RecipeCreateInput {
  userId?: UserCreateOneInput;
  recipeLink: String;
}

export interface CommentUpdateManyMutationInput {
  text?: String;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userId?: UserWhereInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CommentUpdateInput {
  userId?: UserUpdateOneRequiredInput;
  text?: String;
}

export interface UserCreateInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface Ingredient_TypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Ingredient_TypeWhereInput;
  AND?:
    | Ingredient_TypeSubscriptionWhereInput[]
    | Ingredient_TypeSubscriptionWhereInput;
  OR?:
    | Ingredient_TypeSubscriptionWhereInput[]
    | Ingredient_TypeSubscriptionWhereInput;
  NOT?:
    | Ingredient_TypeSubscriptionWhereInput[]
    | Ingredient_TypeSubscriptionWhereInput;
}

export interface Ingredient_TypeUpdateInput {
  description?: String;
}

export interface Ingredient_TypeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: Ingredient_TypeWhereInput[] | Ingredient_TypeWhereInput;
  OR?: Ingredient_TypeWhereInput[] | Ingredient_TypeWhereInput;
  NOT?: Ingredient_TypeWhereInput[] | Ingredient_TypeWhereInput;
}

export type IngredientWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CreationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CreationWhereInput;
  AND?: CreationSubscriptionWhereInput[] | CreationSubscriptionWhereInput;
  OR?: CreationSubscriptionWhereInput[] | CreationSubscriptionWhereInput;
  NOT?: CreationSubscriptionWhereInput[] | CreationSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCreation {
  count: Int;
}

export interface AggregateCreationPromise
  extends Promise<AggregateCreation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCreationSubscription
  extends Promise<AsyncIterator<AggregateCreation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CreationEdge {
  node: Creation;
  cursor: String;
}

export interface CreationEdgePromise
  extends Promise<CreationEdge>,
    Fragmentable {
  node: <T = CreationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CreationEdgeSubscription
  extends Promise<AsyncIterator<CreationEdge>>,
    Fragmentable {
  node: <T = CreationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CreationConnection {
  pageInfo: PageInfo;
  edges: CreationEdge[];
}

export interface CreationConnectionPromise
  extends Promise<CreationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CreationEdge>>() => T;
  aggregate: <T = AggregateCreationPromise>() => T;
}

export interface CreationConnectionSubscription
  extends Promise<AsyncIterator<CreationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CreationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCreationSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Comment {
  id: ID_Output;
  text: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: <T = UserPromise>() => T;
  text: () => Promise<String>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSaved_Recipe {
  count: Int;
}

export interface AggregateSaved_RecipePromise
  extends Promise<AggregateSaved_Recipe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaved_RecipeSubscription
  extends Promise<AsyncIterator<AggregateSaved_Recipe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Saved_RecipeConnection {
  pageInfo: PageInfo;
  edges: Saved_RecipeEdge[];
}

export interface Saved_RecipeConnectionPromise
  extends Promise<Saved_RecipeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Saved_RecipeEdge>>() => T;
  aggregate: <T = AggregateSaved_RecipePromise>() => T;
}

export interface Saved_RecipeConnectionSubscription
  extends Promise<AsyncIterator<Saved_RecipeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Saved_RecipeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaved_RecipeSubscription>() => T;
}

export interface Saved_Recipe {
  id: ID_Output;
  recipeLink: String;
}

export interface Saved_RecipePromise
  extends Promise<Saved_Recipe>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: <T = UserPromise>() => T;
  recipeLink: () => Promise<String>;
}

export interface Saved_RecipeSubscription
  extends Promise<AsyncIterator<Saved_Recipe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: <T = UserSubscription>() => T;
  recipeLink: () => Promise<AsyncIterator<String>>;
}

export interface CreationSubscriptionPayload {
  mutation: MutationType;
  node: Creation;
  updatedFields: String[];
  previousValues: CreationPreviousValues;
}

export interface CreationSubscriptionPayloadPromise
  extends Promise<CreationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CreationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CreationPreviousValuesPromise>() => T;
}

export interface CreationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CreationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CreationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CreationPreviousValuesSubscription>() => T;
}

export interface Ingredient_TypeEdge {
  node: Ingredient_Type;
  cursor: String;
}

export interface Ingredient_TypeEdgePromise
  extends Promise<Ingredient_TypeEdge>,
    Fragmentable {
  node: <T = Ingredient_TypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface Ingredient_TypeEdgeSubscription
  extends Promise<AsyncIterator<Ingredient_TypeEdge>>,
    Fragmentable {
  node: <T = Ingredient_TypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CreationPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  photo: String;
}

export interface CreationPreviousValuesPromise
  extends Promise<CreationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface CreationPreviousValuesSubscription
  extends Promise<AsyncIterator<CreationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIngredient {
  count: Int;
}

export interface AggregateIngredientPromise
  extends Promise<AggregateIngredient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIngredientSubscription
  extends Promise<AsyncIterator<AggregateIngredient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Creation {
  id: ID_Output;
  name: String;
  description: String;
  photo: String;
}

export interface CreationPromise extends Promise<Creation>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface CreationSubscription
  extends Promise<AsyncIterator<Creation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface IngredientConnection {
  pageInfo: PageInfo;
  edges: IngredientEdge[];
}

export interface IngredientConnectionPromise
  extends Promise<IngredientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IngredientEdge>>() => T;
  aggregate: <T = AggregateIngredientPromise>() => T;
}

export interface IngredientConnectionSubscription
  extends Promise<AsyncIterator<IngredientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IngredientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIngredientSubscription>() => T;
}

export interface IngredientSubscriptionPayload {
  mutation: MutationType;
  node: Ingredient;
  updatedFields: String[];
  previousValues: IngredientPreviousValues;
}

export interface IngredientSubscriptionPayloadPromise
  extends Promise<IngredientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IngredientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IngredientPreviousValuesPromise>() => T;
}

export interface IngredientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IngredientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IngredientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IngredientPreviousValuesSubscription>() => T;
}

export interface Ingredient {
  id: ID_Output;
  name: String;
}

export interface IngredientPromise extends Promise<Ingredient>, Fragmentable {
  id: () => Promise<ID_Output>;
  ingredientTypeCode: <T = Ingredient_TypePromise>() => T;
  name: () => Promise<String>;
}

export interface IngredientSubscription
  extends Promise<AsyncIterator<Ingredient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ingredientTypeCode: <T = Ingredient_TypeSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Ingredient_Type {
  id: ID_Output;
  description: String;
}

export interface Ingredient_TypePromise
  extends Promise<Ingredient_Type>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
}

export interface Ingredient_TypeSubscription
  extends Promise<AsyncIterator<Ingredient_Type>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface Saved_RecipeSubscriptionPayload {
  mutation: MutationType;
  node: Saved_Recipe;
  updatedFields: String[];
  previousValues: Saved_RecipePreviousValues;
}

export interface Saved_RecipeSubscriptionPayloadPromise
  extends Promise<Saved_RecipeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Saved_RecipePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Saved_RecipePreviousValuesPromise>() => T;
}

export interface Saved_RecipeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Saved_RecipeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Saved_RecipeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Saved_RecipePreviousValuesSubscription>() => T;
}

export interface Saved_RecipePreviousValues {
  id: ID_Output;
  recipeLink: String;
}

export interface Saved_RecipePreviousValuesPromise
  extends Promise<Saved_RecipePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  recipeLink: () => Promise<String>;
}

export interface Saved_RecipePreviousValuesSubscription
  extends Promise<AsyncIterator<Saved_RecipePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  recipeLink: () => Promise<AsyncIterator<String>>;
}

export interface IngredientPreviousValues {
  id: ID_Output;
  name: String;
}

export interface IngredientPreviousValuesPromise
  extends Promise<IngredientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface IngredientPreviousValuesSubscription
  extends Promise<AsyncIterator<IngredientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Saved_RecipeEdge {
  node: Saved_Recipe;
  cursor: String;
}

export interface Saved_RecipeEdgePromise
  extends Promise<Saved_RecipeEdge>,
    Fragmentable {
  node: <T = Saved_RecipePromise>() => T;
  cursor: () => Promise<String>;
}

export interface Saved_RecipeEdgeSubscription
  extends Promise<AsyncIterator<Saved_RecipeEdge>>,
    Fragmentable {
  node: <T = Saved_RecipeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIngredient_Type {
  count: Int;
}

export interface AggregateIngredient_TypePromise
  extends Promise<AggregateIngredient_Type>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIngredient_TypeSubscription
  extends Promise<AsyncIterator<AggregateIngredient_Type>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Ingredient_TypePreviousValues {
  id: ID_Output;
  description: String;
}

export interface Ingredient_TypePreviousValuesPromise
  extends Promise<Ingredient_TypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
}

export interface Ingredient_TypePreviousValuesSubscription
  extends Promise<AsyncIterator<Ingredient_TypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface Ingredient_TypeSubscriptionPayload {
  mutation: MutationType;
  node: Ingredient_Type;
  updatedFields: String[];
  previousValues: Ingredient_TypePreviousValues;
}

export interface Ingredient_TypeSubscriptionPayloadPromise
  extends Promise<Ingredient_TypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Ingredient_TypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Ingredient_TypePreviousValuesPromise>() => T;
}

export interface Ingredient_TypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Ingredient_TypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Ingredient_TypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Ingredient_TypePreviousValuesSubscription>() => T;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ingredient_TypeConnection {
  pageInfo: PageInfo;
  edges: Ingredient_TypeEdge[];
}

export interface Ingredient_TypeConnectionPromise
  extends Promise<Ingredient_TypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Ingredient_TypeEdge>>() => T;
  aggregate: <T = AggregateIngredient_TypePromise>() => T;
}

export interface Ingredient_TypeConnectionSubscription
  extends Promise<AsyncIterator<Ingredient_TypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Ingredient_TypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIngredient_TypeSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface IngredientEdge {
  node: Ingredient;
  cursor: String;
}

export interface IngredientEdgePromise
  extends Promise<IngredientEdge>,
    Fragmentable {
  node: <T = IngredientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IngredientEdgeSubscription
  extends Promise<AsyncIterator<IngredientEdge>>,
    Fragmentable {
  node: <T = IngredientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Creation",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Saved_Recipe",
    embedded: false
  },
  {
    name: "Ingredient_Type",
    embedded: false
  },
  {
    name: "Ingredient",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
